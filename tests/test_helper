#include <vector>
#include <unordered_set>
#include <cppunit/extensions/HelperMacros.h>

#define assert_equal CPPUNIT_ASSERT_EQUAL
#define assert       CPPUNIT_ASSERT

using namespace std;

void dump_vector(string name, vector<ulong> v) {
  cout << "\n" << name << "\n";
  for(int i=0; i<v.size(); i++) {
    cout << v[i] << " ";
  }

  cout << "\n\n";
}

void dump_set(string name, set<ulong> v) {
  cout << "\n" << name << "\n";

  for (std::set<ulong>::iterator it=v.begin(); it!=v.end(); ++it)
    cout << ' ' << *it;

  cout << '\n';
}

void assert_equivalent_vectors(vector<ulong> expected, vector<ulong> actual)
{
  dump_vector("expected", expected);
  dump_vector("actual", actual);

  unordered_set<ulong> expected_set(expected.begin(), expected.end());
  unordered_set<ulong> actual_set(actual.begin(), actual.end());
  assert(expected_set == actual_set);
}

void assert_equal_vectors(vector<ulong> expected, vector<ulong> actual)
{
  if(expected != actual) {
    dump_vector("expected", expected);
    dump_vector("actual", actual);
  }
  assert(expected == actual);
}